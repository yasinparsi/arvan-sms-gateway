networks:
  kafka_network:

volumes:
  Kafka00_Standalone:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

services:
  Kafka00Service:
    image: bitnami/kafka:3.6.1-debian-11-r0
    restart: always
    container_name: Kafka00Container
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      # KRaft settings
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@Kafka00Service:9093
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      # Listeners
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://Kafka00Service:9092,EXTERNAL://127.0.0.1:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - kafka_network
    volumes:
      - "Kafka00_Standalone:/bitnami/kafka"

  KafkaInitTopics:
    image: bitnami/kafka:3.6.1-debian-11-r0
    container_name: KafkaInitTopics
    depends_on:
      - Kafka00Service
    networks:
      - kafka_network
    restart: "no"
    entrypoint: /bin/bash
    command: >
      -lc '
      echo "Waiting for Kafka broker at Kafka00Service:9092...";
      for i in {1..30}; do
        kafka-metadata-quorum.sh --bootstrap-server Kafka00Service:9092 --status >/dev/null 2>&1 && break;
        sleep 2;
      done;
      echo "Creating topics...";
      kafka-topics.sh --create --if-not-exists --bootstrap-server Kafka00Service:9092 --replication-factor 1 --partitions 3 --topic sms-normal;
      kafka-topics.sh --create --if-not-exists --bootstrap-server Kafka00Service:9092 --replication-factor 1 --partitions 3 --topic sms-express;
      kafka-topics.sh --create --if-not-exists --bootstrap-server Kafka00Service:9092 --replication-factor 1 --partitions 3 --topic sms-dlq;
      kafka-topics.sh --create --if-not-exists --bootstrap-server Kafka00Service:9092 --replication-factor 1 --partitions 3 --topic sms-status;
      echo "All topics are ready."
      '
  
  KafkaWebUiService:
    image: provectuslabs/kafka-ui:latest
    restart: always
    container_name: KafkaWebUiContainer
    ports:
      - '8080:8080'
    environment:
      - KAFKA_CLUSTERS_0_NAME=Kafka-V35
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=Kafka00Service:9092
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED=true
      #- KAFKA_CLUSTERS_0_METRICS_PORT=9999
    networks:
      - kafka_network

  RedisService:
    image: redis:7-alpine
    container_name: RedisContainer
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kafka_network

  PostgresService:
    image: postgres:15-alpine
    container_name: PostgresContainer
    restart: always
    environment:
      POSTGRES_USER: report_user
      POSTGRES_PASSWORD: report_pass
      POSTGRES_DB: sms_report
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kafka_network
